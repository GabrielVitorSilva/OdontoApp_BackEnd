generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum for user roles
enum Role {
  ADMIN
  PROFESSIONAL
  CLIENT
}

// Enum for consultation status
enum ConsultationStatus {
  SCHEDULED
  CANCELED
  COMPLETED
}

// User model representing all users in the system
model User {
  id       String  @id @default(uuid())
  name     String
  email    String  @unique
  cpf      String  @unique
  password String
  phone    String?
  role     Role

  Client        Client?
  Professional  Professional?
  Administrator Administrator?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  Notifications Notification[]
}

// Client model, related to a User
model Client {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  consultations Consultation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

// Professional model, related to a User
model Professional {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  treatments    Treatment[]
  consultations Consultation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

// Administrator model, related to a User
model Administrator {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

// Treatment model, related to a Professional
model Treatment {
  id              String       @id @default(uuid())
  name            String
  description     String?
  durationMinutes Int
  price           Float
  professionalId  String
  professional    Professional @relation(fields: [professionalId], references: [id])

  consultations Consultation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

// Consultation model, representing appointments
model Consultation {
  id             String             @id @default(uuid())
  clientId       String
  professionalId String
  treatmentId    String
  dateTime       DateTime
  status         ConsultationStatus @default(SCHEDULED)

  client       Client       @relation(fields: [clientId], references: [id])
  professional Professional @relation(fields: [professionalId], references: [id])
  treatment    Treatment    @relation(fields: [treatmentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

// Notification model, related to a User
model Notification {
  id      String   @id @default(uuid())
  userId  String
  message String
  viewed  Boolean  @default(false)
  sentAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
}
